# Generated by Django 4.0.4 on 2022-04-26 05:36

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Diseases',
            fields=[
                ('DId', models.AutoField(primary_key=True, serialize=False)),
                ('DName', models.CharField(max_length=50)),
                ('dateRegistered', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExercisingRate',
            fields=[
                ('ERId', models.AutoField(primary_key=True, serialize=False)),
                ('ERName', models.CharField(max_length=20)),
                ('dateRegistered', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='HealthyStatus',
            fields=[
                ('HSId', models.AutoField(primary_key=True, serialize=False)),
                ('HSName', models.CharField(max_length=50)),
                ('dateRegistered', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='MealtimeName',
            fields=[
                ('mtId', models.AutoField(primary_key=True, serialize=False)),
                ('mtName', models.CharField(max_length=50)),
                ('dateRegistered', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('regionId', models.AutoField(primary_key=True, serialize=False)),
                ('regionName', models.CharField(max_length=20)),
                ('dateRegistered', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('roleId', models.AutoField(primary_key=True, serialize=False)),
                ('roleName', models.CharField(max_length=20)),
                ('dateRegistered', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('zoneId', models.AutoField(primary_key=True, serialize=False)),
                ('zoneName', models.CharField(max_length=50)),
                ('dateRegistered', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('customerID', models.CharField(max_length=20, unique=True)),
                ('email', models.EmailField(max_length=254, primary_key=True, serialize=False)),
                ('phoneno', models.CharField(max_length=12, unique=True)),
                ('customerName', models.CharField(max_length=60)),
                ('age', models.IntegerField()),
                ('height', models.DecimalField(decimal_places=2, max_digits=2)),
                ('weight', models.DecimalField(decimal_places=2, max_digits=3)),
                ('dateRegistered', models.DateTimeField(auto_now=True)),
                ('password', models.CharField(max_length=100)),
                ('disease', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Customer.diseases')),
                ('exercising', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Customer.exercisingrate')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('healthStatus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Customer.healthystatus')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Customer.region')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Customer.role')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': [('change_details', 'See diet plan'), ('close_app', 'Can chat with dietitian')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='region',
            name='zone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Customer.zone'),
        ),
    ]
